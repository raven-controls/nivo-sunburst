{"version":3,"file":"nivo-sunburst.cjs.js","sources":["../src/SunburstTooltip.tsx","../src/props.ts","../src/hooks.ts","../src/Arcs.tsx","../src/Sunburst.tsx","../src/ResponsiveSunburst.tsx"],"sourcesContent":["import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SunburstTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { ArcTransitionMode } from '@nivo/arcs'\nimport { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { SunburstTooltip } from './SunburstTooltip'\nimport { SunburstLayerId } from './types'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    cornerRadius: 0,\n    innerRadius: 0.4,\n    renderRootNode: false,\n    layers: ['arcs', 'arcLabels'] as SunburstLayerId[],\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    colorBy: 'id' as const,\n    inheritColorFromParent: true,\n    childColor: { from: 'color' },\n    borderWidth: 1,\n    borderColor: 'white',\n    enableArcLabels: false,\n    arcLabel: 'formattedValue',\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsSkipAngle: 0,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n    isInteractive: true,\n    defs: [],\n    fill: [],\n    tooltip: SunburstTooltip,\n    role: 'img',\n}\n","import { useMemo } from 'react'\nimport { partition as d3Partition, hierarchy as d3Hierarchy } from 'd3-hierarchy'\nimport { scaleRadial as d3ScaleRadial } from 'd3-scale'\nimport cloneDeep from 'lodash/cloneDeep'\nimport sortBy from 'lodash/sortBy'\nimport { usePropertyAccessor, useTheme, useValueFormatter } from '@nivo/core'\nimport { Arc, useArcGenerator } from '@nivo/arcs'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport {\n    SunburstCommonProps,\n    ComputedDatum,\n    DataProps,\n    DatumId,\n    SunburstCustomLayerProps,\n} from './types'\nimport { defaultProps } from './props'\n\nexport const useSunburst = <RawDatum>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    radius,\n    cornerRadius = defaultProps.cornerRadius,\n    innerRadius = defaultProps.innerRadius,\n    renderRootNode = defaultProps.renderRootNode,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n}: {\n    data: DataProps<RawDatum>['data']\n    id?: DataProps<RawDatum>['id']\n    value?: DataProps<RawDatum>['value']\n    valueFormat?: DataProps<RawDatum>['valueFormat']\n    radius: number\n    cornerRadius?: SunburstCommonProps<RawDatum>['cornerRadius']\n    innerRadius?: SunburstCommonProps<RawDatum>['innerRadius']\n    renderRootNode?: SunburstCommonProps<RawDatum>['renderRootNode']\n    colors?: SunburstCommonProps<RawDatum>['colors']\n    colorBy?: SunburstCommonProps<RawDatum>['colorBy']\n    inheritColorFromParent?: SunburstCommonProps<RawDatum>['inheritColorFromParent']\n    childColor?: SunburstCommonProps<RawDatum>['childColor']\n}) => {\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>>(\n        colors,\n        colorBy\n    )\n    const getChildColor = useInheritedColor<ComputedDatum<RawDatum>>(childColor, theme)\n\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const nodes: ComputedDatum<RawDatum>[] = useMemo(() => {\n        // d3 mutates the data for performance reasons,\n        // however it does not work well with reactive programming,\n        // this ensures that we don't mutate the input data\n        const clonedData = cloneDeep(data)\n\n        const hierarchy = d3Hierarchy(clonedData).sum(getValue)\n\n        const partition = d3Partition<RawDatum>().size([2 * Math.PI, radius * radius])\n        // exclude root node\n        const descendants = renderRootNode\n            ? partition(hierarchy).descendants()\n            : partition(hierarchy).descendants().slice(1)\n\n        const total = hierarchy.value ?? 0\n\n        // It's important to sort node by depth,\n        // it ensures that we assign a parent node\n        // which has already been computed, because parent nodes\n        // are going to be computed first\n        const sortedNodes = sortBy(descendants, 'depth')\n\n        const innerRadiusOffset = radius * Math.min(innerRadius, 1)\n\n        const maxDepth = Math.max(...sortedNodes.map(n => n.depth))\n\n        const scale = d3ScaleRadial().domain([0, maxDepth]).range([innerRadiusOffset, radius])\n\n        return sortedNodes.reduce<ComputedDatum<RawDatum>[]>((acc, descendant) => {\n            const id = getId(descendant.data)\n            // d3 hierarchy node value is optional by default as it depends on\n            // a call to `count()` or `sum()`, and we previously called `sum()`,\n            // d3 typings could be improved and make it non optional when calling\n            // one of those.\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const value = descendant.value!\n            const percentage = (100 * value) / total\n            const path = descendant.ancestors().map(ancestor => getId(ancestor.data))\n\n            const arc: Arc = {\n                startAngle: descendant.x0,\n                endAngle: descendant.x1,\n                innerRadius:\n                    renderRootNode && descendant.depth === 0 ? 0 : scale(descendant.depth - 1),\n                outerRadius:\n                    renderRootNode && descendant.depth === 0\n                        ? innerRadius\n                        : scale(descendant.depth),\n            }\n\n            let parent: ComputedDatum<RawDatum> | undefined\n            if (descendant.parent) {\n                // as the parent is defined by the input data, and we sorted the data\n                // by `depth`, we can safely assume it's defined.\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                parent = acc.find(node => node.id === getId(descendant.parent!.data))\n            }\n\n            const normalizedNode: ComputedDatum<RawDatum> = {\n                id,\n                path,\n                value,\n                percentage,\n                formattedValue: valueFormat ? formatValue(value) : `${percentage.toFixed(2)}%`,\n                color: '',\n                arc,\n                data: descendant.data,\n                depth: descendant.depth,\n                height: descendant.height,\n            }\n\n            if (inheritColorFromParent && parent && normalizedNode.depth > 1) {\n                normalizedNode.color = getChildColor(parent, normalizedNode)\n            } else {\n                normalizedNode.color = getColor(normalizedNode)\n            }\n\n            return [...acc, normalizedNode]\n        }, [])\n    }, [\n        data,\n        radius,\n        getValue,\n        getId,\n        valueFormat,\n        formatValue,\n        getColor,\n        inheritColorFromParent,\n        getChildColor,\n        innerRadius,\n        renderRootNode,\n    ])\n\n    const arcGenerator = useArcGenerator({ cornerRadius })\n\n    return { arcGenerator, nodes }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useSunburstLayerContext = <RawDatum>({\n    nodes,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n}: SunburstCustomLayerProps<RawDatum>): SunburstCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            nodes,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n        }),\n        [nodes, arcGenerator, centerX, centerY, radius]\n    )\n","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { ComputedDatum, SunburstCommonProps, MouseHandlers } from './types'\nimport { useTooltip } from '@nivo/tooltip'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: SunburstCommonProps<RawDatum>['borderWidth']\n    borderColor: SunburstCommonProps<RawDatum>['borderColor']\n    isInteractive: SunburstCommonProps<RawDatum>['isInteractive']\n    onClick?: MouseHandlers<RawDatum>['onClick']\n    onMouseEnter?: MouseHandlers<RawDatum>['onMouseEnter']\n    onMouseMove?: MouseHandlers<RawDatum>['onMouseMove']\n    onMouseLeave?: MouseHandlers<RawDatum>['onMouseLeave']\n    tooltip: SunburstCommonProps<RawDatum>['tooltip']\n    transitionMode: SunburstCommonProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, datum), event)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, datum), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { defaultProps } from './props'\nimport { useSunburst, useSunburstLayerContext } from './hooks'\nimport { SunburstSvgProps, SunburstLayerId, SunburstLayer, ComputedDatum } from './types'\nimport { Arcs } from './Arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\n\ntype InnerSunburstProps<RawDatum> = Partial<\n    Omit<\n        SunburstSvgProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSunburst = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    innerRadius = defaultProps.innerRadius,\n    renderRootNode = defaultProps.renderRootNode,\n    valueFormat,\n    cornerRadius = defaultProps.cornerRadius,\n    layers = defaultProps.layers as SunburstLayer<RawDatum>[],\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor,\n    margin: partialMargin,\n    width,\n    height,\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsComponent,\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n    transitionMode = defaultProps.transitionMode,\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n}: InnerSunburstProps<RawDatum>) => {\n    const { innerHeight, innerWidth, margin, outerHeight, outerWidth } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { centerX, centerY, radius } = useMemo(() => {\n        const radius = Math.min(innerWidth, innerHeight) / 2\n\n        return { radius, centerX: innerWidth / 2, centerY: innerHeight / 2 }\n    }, [innerHeight, innerWidth])\n\n    const { arcGenerator, nodes } = useSunburst({\n        data,\n        id,\n        value,\n        valueFormat,\n        radius,\n        cornerRadius,\n        innerRadius,\n        renderRootNode,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const boundDefs = bindDefs(defs, nodes, fill, {\n        dataKey: '.',\n        colorKey: 'color',\n        targetKey: 'fill',\n    })\n\n    const layerById: Record<SunburstLayerId, ReactNode> = {\n        arcs: null,\n        arcLabels: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={nodes}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                transitionMode={transitionMode}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n                onMouseMove={onMouseMove}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={nodes}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    const layerContext = useSunburstLayerContext<RawDatum>({\n        nodes,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            defs={boundDefs}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as SunburstLayerId] !== undefined) {\n                    return layerById[layer as SunburstLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Sunburst = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSunburst<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Sunburst } from './Sunburst'\nimport { SunburstSvgProps } from './types'\n\ntype ResponsiveSunburstProps<RawDatum> = Partial<\n    Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data'>\n\nexport const ResponsiveSunburst = <RawDatum,>(props: ResponsiveSunburstProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Sunburst<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["defaultProps","id","value","cornerRadius","innerRadius","renderRootNode","layers","colors","scheme","colorBy","inheritColorFromParent","childColor","from","borderWidth","borderColor","enableArcLabels","arcLabel","arcLabelsRadiusOffset","arcLabelsSkipAngle","arcLabelsTextColor","theme","animate","motionConfig","transitionMode","isInteractive","defs","fill","tooltip","_ref","formattedValue","color","_jsx","BasicTooltip","enableChip","role","useSunburst","data","_ref$id","_ref$value","valueFormat","radius","_ref$cornerRadius","_ref$innerRadius","_ref$renderRootNode","_ref$colors","_ref$colorBy","_ref$inheritColorFrom","_ref$childColor","useTheme","getColor","useOrdinalColorScale","getChildColor","useInheritedColor","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","nodes","useMemo","_hierarchy$value","clonedData","cloneDeep","hierarchy","d3Hierarchy","sum","partition","d3Partition","size","Math","PI","descendants","slice","total","sortedNodes","sortBy","innerRadiusOffset","min","maxDepth","max","apply","map","n","depth","scale","d3ScaleRadial","domain","range","reduce","acc","descendant","parent","percentage","path","ancestors","ancestor","arc","startAngle","x0","endAngle","x1","outerRadius","find","node","normalizedNode","toFixed","height","concat","arcGenerator","useArcGenerator","useSunburstLayerContext","_ref2","centerX","centerY","Arcs","center","onClick","onMouseEnter","onMouseMove","onMouseLeave","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","datum","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","InnerSunburst","_ref$layers","_ref$borderWidth","_ref$borderColor","partialMargin","margin","width","_ref$enableArcLabels","_ref$arcLabel","_ref$arcLabelsRadiusO","_ref$arcLabelsSkipAng","_ref$arcLabelsTextCol","arcLabelsComponent","_ref$defs","_ref$fill","_ref$transitionMode","_ref$isInteractive","_ref$tooltip","_ref$role","_useDimensions","useDimensions","innerHeight","innerWidth","outerHeight","outerWidth","_useMemo","_useSunburst","boundDefs","bindDefs","dataKey","colorKey","targetKey","layerById","arcs","arcLabels","includes","jsx","ArcLabelsLayer","label","radiusOffset","skipAngle","textColor","component","layerContext","SvgWrapper","children","layer","i","undefined","Fragment","Sunburst","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","_extends","props","ResponsiveWrapper"],"mappings":"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"}